package com.kelme.services

import android.Manifest
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.content.pm.PackageManager
import android.location.Location
import android.os.*
import android.util.Log
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.lifecycle.MutableLiveData
import com.google.android.gms.location.*
import com.kelme.R
import com.kelme.model.request.CurrentLocationRequest
import com.kelme.network.RetrofitInstance
import com.kelme.utils.PrefManager
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.async
import java.util.*

class LocationService : Service() {
    private val NOTIFICATION_CHANNEL_ID = "my_notification_location"
    private val TAG = "LocationService"
    private lateinit var locationRequest: LocationRequest
    private lateinit var fusedLocationProviderClient: FusedLocationProviderClient
    private lateinit var locationCallback: LocationCallback
    private lateinit var notificationManager: NotificationManager
    private var mPrevLocation = Location("provider")
    private var isRunning = false
    var afterTwenty :Boolean =true
    private var instance: LocationService? = null

    private val mBinder: IBinder = MyBinder()
    // Random number generator
    private val mGenerator: Random = Random()
    // LiveData for capturing random number generated by the service
    val randomNumberLiveData: MutableLiveData<Int> = MutableLiveData()

    inner class MyBinder : Binder() {
        // Return this instance of MyService so clients can call public methods
        val service: LocationService
            get() =// Return this instance of MyService so clients can call public methods
                this@LocationService
    }

    fun isInstanceCreated(): Boolean {
        return instance != null
    }
    override fun onCreate() {
        super.onCreate()
        instance = this
        isRunning=true
        mPrevLocation.latitude = 0.0
        mPrevLocation.longitude = 0.0

        isServiceStarted = true
        val builder: NotificationCompat.Builder =
            NotificationCompat.Builder(this, NOTIFICATION_CHANNEL_ID)
                .setOngoing(false)
                .setSmallIcon(R.drawable.kelme_app_logo)
                .setContentTitle("Location Service")
                .setContentText("Location service is running in background")
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val notificationManager: NotificationManager =
                getSystemService(NOTIFICATION_SERVICE) as NotificationManager
            val notificationChannel = NotificationChannel(
                NOTIFICATION_CHANNEL_ID,
                NOTIFICATION_CHANNEL_ID, NotificationManager.IMPORTANCE_HIGH
            )
            notificationChannel.description = NOTIFICATION_CHANNEL_ID
            notificationChannel.setSound(null, null)
            notificationManager.createNotificationChannel(notificationChannel)
            startForeground(1, builder.build())
        }


        Log.d("isRunning","in OnCreate")
       // registerCallbck()
    }

    fun registerCallbck() {
        var currentLocation: Location? = null
        locationRequest = LocationRequest.create().apply {
            interval = 20000/*TimeUnit.SECONDS.toMillis(2)*/
            fastestInterval = 20000/*TimeUnit.SECONDS.toMillis(2)*/
            maxWaitTime = 20000/*TimeUnit.MINUTES.toMillis(1)*/
           // priority = LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY
            priority = LocationRequest.PRIORITY_HIGH_ACCURACY
        }

        fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this)
        if (ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.ACCESS_COARSE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            // TODO: Consider calling
            //    ActivityCompat#requestPermissions
            // here to request the missing permissions, and then overriding
            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
            //                                          int[] grantResults)
            // to handle the case where the user grants the permission. See the documentation
            // for ActivityCompat#requestPermissions for more details.
            return
        }
        fusedLocationProviderClient.requestLocationUpdates(
            locationRequest,
            locationCallback,
            Looper.getMainLooper())


        locationCallback = object : LocationCallback() {
            override fun onLocationResult(locationResult: LocationResult) {
                super.onLocationResult(locationResult)
                currentLocation = locationResult.lastLocation
                Log.e(TAG, "current-location-update-onBackground"+currentLocation.toString())
                GlobalScope.async {
                    val request = CurrentLocationRequest(
                        currentLocation?.latitude.toString(),
                        currentLocation?.longitude.toString(),
                        System.currentTimeMillis().toString()
                    )
                    trackUser(request)
                }
            }
        }

        if (ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.ACCESS_COARSE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            return
        }

//        try {
//            fusedLocationProviderClient.requestLocationUpdates(
//                locationRequest, locationCallback, Looper.getMainLooper())
//        } catch (unlikely: SecurityException) {
//            Log.e(TAG, "Lost location permissions. Couldn't remove updates. $unlikely")
//        }
    }

    fun isRunning(): Boolean {
        return isRunning
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        Log.d("isRunning","in onStartCommand")
        val timer = Timer()
        LocationHelper().startListeningUserLocation(
            this, object : MyLocationListener {
                override fun onLocationChanged(location: Location?) {
                        GlobalScope.async {

                            mLocation = location
                            PrefManager.write(PrefManager.SLATITUDE, mLocation?.latitude.toString())
                            PrefManager.write(
                                PrefManager.SLONGITUDE,
                                mLocation?.longitude.toString()
                            )
                            PrefManager.write(PrefManager.LATITUDE, mLocation?.latitude.toString())
                            PrefManager.write(PrefManager.LONGITUDE, mLocation?.longitude.toString())

                            if(PrefManager.read(PrefManager.IS_LOGIN, false)) {
                                val request = CurrentLocationRequest(
                                    mLocation?.latitude.toString(),
                                    mLocation?.longitude.toString(),
                                    System.currentTimeMillis().toString()
                                )
                                trackUser(request)
                            }else{
                                stopSelf()
                            }
                        }
                        Log.e(TAG, "onLocationChanged: "+ mLocation?.latitude.toString()+" "+mLocation?.longitude.toString())

                }
            })
        return START_STICKY
    }

    suspend fun trackUser(request: CurrentLocationRequest) =
        RetrofitInstance.apiService?.trackUser(request)

    override fun onBind(intent: Intent): IBinder? {
        return mBinder
    }

    override fun onDestroy() {
        super.onDestroy()
        instance = null
        isServiceStarted = false
        isRunning=false
        stopSelf()
        /*val removeTask = fusedLocationProviderClient.removeLocationUpdates(locationCallback)
        removeTask.addOnCompleteListener { task ->
            if (task.isSuccessful) {
                Log.e(TAG, "Location Callback removed.")
                stopSelf()
            } else {
                Log.e(TAG, "Failed to remove Location Callback.")
            }
        }*/
    }

    companion object {
        var mLocation: Location? = null
        var isServiceStarted = false
    }
}